cmake_minimum_required(VERSION 2.8.7)
project(Getraenkeautomat)

if(NOT ${CMAKE_VERSION} LESS 3.2)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else()
    message(STATUS "Checking compiler flags for C++11 support.")
    # Set C++11 support flags for various compilers
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_CXX11)
        message(STATUS "C++11 is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        endif()
    elseif(COMPILER_SUPPORTS_CXX0X)
        message(STATUS "C++0x is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
        endif()
    else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
endif()

add_subdirectory(lib)

list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/main.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/protocol.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/NXP.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/SerialDevice.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/CWBoard.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/RFIDBoard.cpp")
list(APPEND SOURCE "${PROJECT_SOURCE_DIR}/Card.cpp")
#source_group(src "${PROJECT_SOURCE_DIR}/main.cpp")

file(GLOB_RECURSE SOURCE_TMP "${PROJECT_SOURCE_DIR}/nxprdlib/*.c" )
list(APPEND SOURCE ${SOURCE_TMP})

add_executable(${PROJECT_NAME} ${SOURCE})
target_link_libraries(${PROJECT_NAME} ${EXT_LIBS})

include_directories(${CPR_INCLUDE_DIRS} ${JSON_INCLUDE_DIRS})

foreach(dir ${NXP_INCLUDE_DIRS})
      include_directories( ${dir} )
 endforeach()

foreach(dir ${GLIB_INCLUDE_DIRS})
      include_directories( ${dir} )
 endforeach()

set(EXT_LIBS  pthread  wiringPi  glib-2.0  m ${CPR_LIBRARIES})

add_definitions(-g -O0)
